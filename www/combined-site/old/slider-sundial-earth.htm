<!DOCTYPE html>
<head>
	<meta charset="UTF-8">
	<title>sundial-slider</title>
	<script src="./js/three.js"></script>
	<script src="./js/namespace.js" ></script>
	<script src="./js/prototype.js" ></script>
	<script src="./js/shapes.js" ></script>
	<script defer type="text/javascript">
		/*  Show a pyramid with five differently colored sides using Three.js.
		 *  The pyramid geometry is constructed directly.
		 *  The cube can be rotated using the arrow keys.  The home key
		 *  or the return key will reset the rotation to zero.  WebGL
		 *  will be used if available.  If not, the program will attempt
		 *  to use the canvas 2D API.
		 */

		var star;

		var renderer;
		// A three.js WebGL or Canvas renderer.
		var scene;
		// The 3D scene that will be rendered, containing the cube.
		var camera;
		// The camera that takes the picture of the scene.
		var light;

		var pyramid;
		// The three.js object that represents the pyramid.

		var rotateX = 0.4;
		// rotation of cube about the x-axis
		var rotateY = -.1;
		// rotation of cube about the y-axis

		var SCREEN_WIDTH = window.innerWidth - 100;
		var SCREEN_HEIGHT = window.innerHeight - 100;

		var container, mesh, geometry, plane;

		var windowHalfX = window.innerWidth / 2;
		var windowHalfY = window.innerHeight / 2;
		
		var earthRadius= 108;	//360
		var lightDistantance= 1000;

		/*  This function is called by the init() method.  Its purpose is
		 *  to add objects to the scene.  The scene, camera, and renderer
		 *  objects have already been created.
		 */
		function createWorld() {
			//	console.debug();

			camera = new THREE.PerspectiveCamera(30, window.innerWidth / window.innerHeight, 1, 100000);
			camera.position.x = 1200;
			camera.position.y = 1000;
			camera.lookAt({
				x : 0,
				y : 0,
				z : 0
			});

			scene = new THREE.Scene();

			var groundMaterial = new THREE.MeshPhongMaterial({
				color : 0x6C6C6C
			});
			plane = new THREE.Mesh(new THREE.PlaneGeometry(500, 500), groundMaterial);
			plane.rotation.x = -Math.PI / 2;
			plane.receiveShadow = true;

			scene.add(plane);

			// LIGHTS
			scene.add(new THREE.AmbientLight(0x666666));

			light = new THREE.DirectionalLight(0xdfebff, 1.75);
			light.position.set(300, 400, 50);
			light.position.multiplyScalar(1.3);

			light.castShadow = true;
			light.shadowCameraVisible = true;

			light.shadowMapWidth = 512;
			light.shadowMapHeight = 512;

			var d = 200;

			light.shadowCameraLeft = -d;
			light.shadowCameraRight = d;
			light.shadowCameraTop = d;
			light.shadowCameraBottom = -d;

			light.shadowCameraFar = 1000;
			light.shadowDarkness = 0.2;

			scene.add(light);

			var boxgeometry = new THREE.CubeGeometry(100, 100, 100);
			var boxmaterial = new THREE.MeshLambertMaterial({
				color : 0x0aeedf
			});
			var cube = new THREE.Mesh(boxgeometry, boxmaterial);
			cube.castShadow = true;
			cube.position.x = 0;
			cube.position.y = 100;
			cube.position.z = 0;

			//scene.add(cube);

			// earth-start

			var loader = new THREE.TextureLoader();
			//textures/land_ocean_ice_cloud_2048.jpg
			loader.load('./img/246.png', function(texture) {

				var geometry = new THREE.SphereGeometry(earthRadius, 20, 20);

				var material = new THREE.MeshBasicMaterial({
					map : texture,
					overdraw : true
				});
				var earth = new THREE.Mesh(geometry, material);
				//group.add( mesh );
				earth.castShadow = true;
				earth.receiveShadow = true;
				earth.overdraw = true;
				scene.add(earth);
			});
			//earth-end
			// sphere - start
			// the first argument of THREE.SphereGeometry is the radius, the second argument is
			// the segmentsWidth, and the third argument is the segmentsHeight.  Increasing the
			// segmentsWidth and segmentsHeight will yield a more perfect circle, but will degrade
			// rendering performance
			/* var sphere = new THREE.Mesh(new THREE.SphereGeometry(100, 80, 80), new THREE.MeshNormalMaterial());
			sphere.castShadow = true;
			sphere.receiveShadow = true;
			sphere.overdraw = true;
			scene.add(sphere)*/
			//sphere- end
			//star - start
			var starPoints = [];

			var expand= 1.0;

//			starPoints.push(new THREE.Vector3(0, 50, 1));
			//top of star, 50->70 goes higher
			//starPoints.push( new THREE.Vector2 (  10,  10 ) );
			//starPoints.push( new THREE.Vector2 (  40,  10 ) );
			//starPoints.push( new THREE.Vector2 (  20, -10 ) );
			//starPoints.push( new THREE.Vector2 (  30, -50 ) );
//			starPoints.push(new THREE.Vector3(10, -40, 1));
			//bottom of star leg, -20->-40 goes lower
			//starPoints.push( new THREE.Vector2 ( -30, -50 ) );
			//starPoints.push( new THREE.Vector2 ( -20, -10 ) );
			//starPoints.push( new THREE.Vector2 ( -40,  10 ) );
//			starPoints.push(new THREE.Vector3(-10, -40, 1));
starPoints.push(new THREE.Vector3(-10, -40, 1));
starPoints.push(new THREE.Vector3(70, 40, 1));
starPoints.push(new THREE.Vector3(75, 40, 1));
starPoints.push(new THREE.Vector3(40, -20, 1));
starPoints.push(new THREE.Vector3(40, -40, 1));
starPoints.push(new THREE.Vector3(-10, -40, 1));
/*starPoints.push(new THREE.Vector3(-10, -40, 10));
starPoints.push(new THREE.Vector3(20, -40, 10));
starPoints.push(new THREE.Vector3(20, -20, 10));
starPoints.push(new THREE.Vector3(55, 40, 10));
starPoints.push(new THREE.Vector3(50, 40, 10));
starPoints.push(new THREE.Vector3(-10, -40, 10));
*/

			var starShape = new THREE.Shape(starPoints);

			var extrusionSettings = {
				size : 30,
				height : 4,
				curveSegments : 3,
				bevelThickness : 1,
				bevelSize : 2,
				bevelEnabled : true,
				material : 0,
				extrudeMaterial : 1,
				amount: 10
			};

			var starGeometry = new THREE.ExtrudeGeometry(starShape, extrusionSettings);

			var materialFront = new THREE.MeshLambertMaterial({
				color : 0xffff00
			});
			var materialSide = new THREE.MeshLambertMaterial({
				color : 0xff8800
			});
			var materialArray = [materialFront, materialSide];
			var starMaterial = new THREE.MeshLambertMaterial(materialArray);

			star = new THREE.Mesh(starGeometry, starMaterial);
			star.position.set(0, 50, 0);

			star.castShadow = true;
			star.receiveShadow = true;
			star.overdraw = true;
			scene.add(star);
			//star - end
		}

		/**
		 *  The render fucntion creates an image of the scene from the point of view
		 *  of the camera and displays it in the canvas.  This is called at the end of
		 *  init() to produce the initial view of the cube, and it is called each time
		 *  the user presses an arrow key, return, or home.
		 */
		function render() {
			//renderer.render(scene, camera);
			camera.lookAt(scene.position);
			renderer.render(scene, camera);
		}

		/**
		 *  An event listener for the keydown event.  It is installed by the init() function.
		 */
		function doKey(evt) {
			var rotationChanged = true;
			switch (evt.keyCode) {
				case 37:
					rotateY -= 0.05;
					break;
				// left arrow
				case 39:
					rotateY += 0.05;
					break;
				// right arrow
				case 38:
					rotateX -= 0.05;
					break;
				// up arrow
				case 40:
					rotateX += 0.05;
					break;
				// down arrow
				case 13:
					rotateX = rotateY = 0;
					break;
				// return
				case 36:
					rotateX = rotateY = 0;
					break;
				// home
				default:
					rotationChanged = false;
			}
			if (rotationChanged) {
				pyramid.rotation.set(rotateX, rotateY, 0);
				render();
				evt.preventDefault();
			}
		}

		function createFromCanvas() {
			try {
				var theCanvas = document.getElementById("cnvs");
				if (!theCanvas || !theCanvas.getContext) {
					document.getElementById("message").innerHTML = "Sorry, your browser doesn't support canvas graphics.";
					return;
				}
				try {// try to create a WebGLRenderer
					if (window.WebGLRenderingContext) {
						renderer = new THREE.WebGLRenderer({
							canvas : theCanvas,
							antialias : true
						});
						renderer.setSize(SCREEN_WIDTH, SCREEN_HEIGHT);
						renderer.domElement.style.position = "relative";
						renderer.shadowMapEnabled = true;
						renderer.shadowMapSoft = true;
					}
				} catch (e) {
				}
				if (!renderer) {// If the WebGLRenderer couldn't be created, try a CanvasRenderer.
					renderer = new THREE.CanvasRenderer({
						canvas : theCanvas
					});
					renderer.setSize(theCanvas.width, theCanvas.height);
					document.getElementById("message").innerHTML = "WebGL not available; falling back to CanvasRenderer.";
				}
				renderer.setClearColor(0x220033);
				// dark violet background
				renderer.setSize(SCREEN_WIDTH, SCREEN_HEIGHT);
				renderer.domElement.style.position = "relative";
				renderer.shadowMapEnabled = true;
				renderer.shadowMapSoft = true;
				//        *scene = new THREE.Scene();
				//        camera = new THREE.PerspectiveCamera(45, theCanvas.width/theCanvas.height, 0.1, 100);
				//        camera.position.z = 4;*
				createWorld();
				render();
				document.addEventListener("keydown", doKey, false);
			} catch (e) {
				document.getElementById("message").innerHTML = "Sorry, an error occurred: " + e;
			}
		}

		function createWebGl() {
			if (false) {
				try {

					// RENDERER
					renderer = new THREE.WebGLRenderer();
					renderer.setSize(SCREEN_WIDTH, SCREEN_HEIGHT);
					renderer.domElement.style.position = "relative";
					renderer.shadowMapEnabled = true;
					renderer.shadowMapSoft = true;

					container = document.createElement('div');
					document.body.appendChild(container);

					container.appendChild(renderer.domElement);
					window.addEventListener('resize', onWindowResize, false);

				} catch (e) {
					document.getElementById("message").innerHTML = "Sorry, an error occurred on second renderer: " + e;
				}
			}
			createWorld();
		}

		/**
		 *  This function is called by the onload event so it will run after the
		 *  page has loaded.  It creates the renderer, canvas, and scene objects,
		 *  calls createWorld() to add objects to the scene, and renders the
		 *  initial view of the scene.  If an error occurs, it is reported.
		 */
		function init() {

			createFromCanvas();

			createWebGl();
		}
		
		
		function doLocationName(lat, lon) {
			//if(Math.round(position.coords.latitude*100) != 4251 && Math.round(position.coords.longitude*100) != -7104) {
			var geoUrl= "http://maps.googleapis.com/maps/api/geocode/json?latlng="+lat+","+lon+"&sensor=true";
			console.log("geoURL: "+ geoUrl);
			$.get(geoUrl, function(data, txtstatus, xbr) {

				var placeName= "Here";
				data.results[0].address_components.forEach(function(entry) {
				//console.debug(entry);
				if(entry.types[0] == "locality" && entry.types[1] == "political") {
					placeName= entry.short_name;
				}
				});
				/*risesetpackage.here.name= placeName;
				risesetpackage.setPlaceTxt(risesetpackage.here);*/
				document.getElementById("placeName").value= placeName;
				
			});
			//}
		}

	</script>
</head>
<body onload="init()">

	<h2>Three.js Example</h2>

	<noscript>
		<p style="color: #A00; font-weight: bold">
			Sorry, but this page requires JavaScript!
		</p>
	</noscript>

	<p style="color:#A00; font-weight: bold" id="message"></p>

	<p>
		<b>Arrow keys rotate the cube about its x- and y-axes.
		<br>
		Return key or HOME key sets both rotations to zero.</b>
	</p>
	
	<br/>
	<label for="xcamera-slider">X-Camera: </label>
	<input id="xcamera-slider" type ="range"  min ="-360" max="360" step ="1" onchange="document.getElementById('xc').value=this.value;doCamera();" />
	<input id="xc" type="number" placeholder="0" size="3" />


	<label for="xcamera-slider">Y-Camera: </label>
	<input id="ycamera-slider" type ="range"  min ="-360" max="360" step ="1" onchange="document.getElementById('yc').value=this.value;doCamera();" />
	<input id="yc" type="number" placeholder="0" size="3" />

	
	<label for="xcamera-slider">Z-Camera: </label>
	<input id="xzamera-slider" type ="range"  min ="-360" max="360" step ="1" onchange="document.getElementById('zc').value=this.value;doCamera();" />
	<input id="zc" type="number" placeholder="0" size="3" />

	<br/>
	<label for="latitude-slider">latitude: </label>
	<input id="latitude-slider" type ="range"  min ="-90.0" max="90.0" step ="0.1" onchange="document.getElementById('lat').value=this.value;doLatLon();" />
	<input id="lat" type="number" placeholder="42.5" size="8" />

	
	<label for="longitude-slider">longitude: </label>
	<input id="longitude-slider" type ="range" min ="-359.9" max="359.9" step ="0.1" onchange="document.getElementById('lon').value=this.value;doLatLon();" />
	<input id="lon" type="number" placeholder="-71.1" size="8" />

	<button onclick="doLocationName(Number(document.getElementById('lat').value), Number(document.getElementById('lon').value))">get Location Name</button>
	<input id="placeName" type="text" placeholder="here" size=20 />
	<br/>
	<button onclick="animate();">Rotate</button>
	<button onclick="reRender();">Render</button>	
	<canvas width=640 height=480 id="cnvs" style="background-color:black">
		canvas didnt load
	</canvas>
	<script>
		var eee = new Object();
		eee.keyCode = 37;
		//document.getElementById('cnvs').addEventListener("click", doKey, false);

		function onWindowResize() {
			windowHalfX = window.innerWidth / 2;
			windowHalfY = window.innerHeight / 2;

			camera.aspect = window.innerWidth / window.innerHeight;
			camera.updateProjectionMatrix();

			webglRenderer.setSize(window.innerWidth, window.innerHeight);
		}

		var go= true;
		function animate() {
			var timer = Date.now() * 0.0002;
			console.log("timer: "+ timer);
			camera.position.x = Math.cos(timer) * lightDistantance;
			camera.position.z = Math.sin(timer) * lightDistantance;
			//star.position.x = star.position.x + 1;
			console.debug("x: " + star.position.x + ", y: " + star.position.y + ", z: " + star.position.z);
			//light.position.z= light.position.z+ 2;
			//light.position.x+= 2;
			console.log("camera x="+camera.position.x+", y="+camera.position.y+", z="+ camera.position.z);

			requestAnimationFrame(animate);
			render();
		}
		
		function reRenderTest() {
			var lt= 30.0;
			//for(var lt= 30.0; lt < 40.0; lt+=1.0) 
			{
				for(var ln= -160.0; ln < -150.0; ln+=1.0) 
				{
					console.log("lt: "+ lt+ ", ln: "+ ln);
					reRender2(lt,ln);
				}
			}
		}
		
		function reRender2(lat, lon) {
			
			var alt= earthRadius;
			var x = alt * Math.cos(astropackage.degToRad(lat)) * Math.sin(astropackage.degToRad(lon));
			var y = alt * Math.sin(astropackage.degToRad(lat));
			var z = alt * Math.cos(astropackage.degToRad(lat)) * Math.cos(astropackage.degToRad(lon));
			
			//console.log("star x="+star.position.x+", y="+star.position.y+", z="+ star.position.z);
			star.position.x = x;
			star.position.y = y;
			star.position.z = z;
			console.log("star x="+star.position.x+", y="+star.position.y+", z="+ star.position.z);
			
			alt= lightDistantance;
			x = alt * Math.cos(astropackage.degToRad(lat)) * Math.sin(astropackage.degToRad(lon));
			y = alt * Math.sin(astropackage.degToRad(lat));
			z = alt * Math.cos(astropackage.degToRad(lat)) * Math.cos(astropackage.degToRad(lon));
			camera.position.x = x;
			camera.position.y = y;
			camera.position.z = z;
			
			render();
		}
		
		function reRender() {
			var lat= Number(document.getElementById('lat').value);
			var lon= Number(document.getElementById('lon').value);
			
			var alt= earthRadius;
			var x = alt * Math.cos(astropackage.degToRad(lat)) * Math.sin(astropackage.degToRad(lon));
			var y = alt * Math.sin(astropackage.degToRad(lat));
			var z = alt * Math.cos(astropackage.degToRad(lat)) * Math.cos(astropackage.degToRad(lon));
			
			//console.log("star x="+star.position.x+", y="+star.position.y+", z="+ star.position.z);
			star.position.x = x;
			star.position.y = y;
			star.position.z = z;
			console.log("star x="+star.position.x+", y="+star.position.y+", z="+ star.position.z);
			
			//camera.position.x = Math.cos(degToRad(lat)) * lightDistantance;
			//camera.position.z = Math.sin(degToRad(lon)) * lightDistantance;

			
			render();
		}
		
		function doCamera() {
			var x= Number(document.getElementById("xc").value);
			var y= Number(document.getElementById("yc").value);
			var z= Number(document.getElementById("zc").value);
			
			console.log("camera x="+camera.position.x+", y="+camera.position.y+", z="+ camera.position.z);
			camera.position.x=x*4;
			camera.position.y=y*4;
			camera.position.z=z*4;
			
			console.log("camera x="+camera.position.x+", y="+camera.position.y+", z="+ camera.position.z);
			
			render();
		}
		
		function doLatLon() {
			var lat= Number(document.getElementById('lat').value);
			var lon= Number(document.getElementById('lon').value);
			console.log("doLatLon(): ");
			
			reRender2(lat, lon);
		}


	</script>

	<br/>
</body>
</html>
