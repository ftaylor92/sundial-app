<!DOCTYPE html>
<html>
  <head>
    <title>Protractor Example</title>

	<script src="./combined-site/js/namespace.js"></script>
	<script src="./js/Sun.js"></script>
	<script src="./js/Dial.js"></script>
	<script src="./combined-site/js/shapes.js"></script>
	<script src="./combined-site/js/sundial.js"></script>
	<script src="./combined-site/js/prototype.js"></script>
	<script src="./js/navy.js"></script>
    <script type="text/javascript" charset="utf-8" src="cordova.js"></script>
    <script type="text/javascript" charset="utf-8">

	var watchID = null;
	var tiltAngle= -1;
	var tiltAngle2= -1;

    // Wait for device API libraries to load
    //
    document.addEventListener("deviceready", onDeviceReady, false);
	
	/*window.addEventListener("devicemotion", function(event) {
          // Process event.acceleration, event.accelerationIncludingGravity,
          // event.rotationRate and event.interval
		   *     {acceleration: {x: v^2/r, y: 0, z: 0},
				   accelerationIncludingGravity: {x: v^2/r, y: 0, z: 9.81},
				   rotationRate: {alpha: 0, beta: 0, gamma: -v/r*180/pi} };*
      }, true);*/

    // device APIs are available
    //
    function onDeviceReady() {
        startWatch();
    }
	
	// Start watching the compass
    function startWatch() {
	 try{
		// Update acceleration every 3 seconds
        var options = { frequency: 3000 };

        watchID = navigator.accelerometer.watchAcceleration(onSuccess, onError, options);
	} catch(err) {
		console.error(err.message);
	}

	 try {
		window.addEventListener('deviceorientation', function(eventData) {
		// gamma is the left-to-right tilt in degrees, where right is positive
		var tiltLR = eventData.gamma;

		// beta is the front-to-back tilt in degrees, where front is positive
		var tiltFB = eventData.beta;

		// alpha is the compass direction the device is facing in degrees
		var dir = eventData.alpha

		// deviceorientation does not provide this data
		var motUD = null;

		// call our orientation event handler
		deviceOrientationHandler(tiltLR, tiltFB, dir, motUD);
		}, false);
 	 } catch(err) {
		console.error(err.message);
	 }

    }


    // onSuccess: Get the current heading
    //
    function onSuccess(acceleration) {
		drawProtractor(acceleration);
    }
	
	
	
	function deviceOrientationHandler(tiltLR, tiltFB, dir, motUD) {
		tiltAngle= tiltLR; //270+ tiltLR; //tiltLR;
		tiltAngle2= tiltFB; //270+ tiltFB; //tiltFB;
		if(tiltFB > 75) {}
		var txt= 'Orientation: tiltLR:' + tiltLR+" tiltFB: "+ tiltFB+" dir: "+ dir+" motUD: "+ motUD;
		console.debug(txt);
		var element = document.getElementById('acceleromete2');
		element.innerHTML = txt;
	}
	

	function drawProtractor(acceleration) {
		try {

		//Heading Text
			var txt= 'Acceleration: x:' + acceleration.x+" y: "+ acceleration.y+" z: "+ acceleration.z+" timestamp: "+ acceleration.timestamp;
			console.debug(txt);
			var element = document.getElementById('acceleromete');
		    element.innerHTML = txt;
		
			//Protractor Graphics
			var c=document.getElementById("protractor");
			var ctx=c.getContext("2d");

			var imageObj = new Image();
			imageObj.onload = function() {
				ctx.drawImage(imageObj,0, 0);

				//draw line


				var radius= 240;
				//var pencilAngle= tiltFB; //270+ tiltFB; //330;
				var origin= shapepackage.Point(Math.round(477/2), 243);
				var pencilLine= shapepackage.Line(origin, shapepackage.Point(origin.x+ Math.cos(astropackage.degToRad(tiltAngle2))* radius, origin.y+ Math.sin(astropackage.degToRad(tiltAngle2))* radius));
				pencilLine.draw(ctx, 2, "Peru");
				var levelLine= shapepackage.Line(origin, shapepackage.Point(origin.x+ Math.cos(astropackage.degToRad(tiltAngle))* radius, origin.y+ Math.sin(astropackage.degToRad(tiltAngle))* radius));
				levelLine.draw(ctx, 2, "OrangeRed");
			};
			imageObj.src = "./img/Protractor-android.png";

 	 } catch(err) {
		alert(err.message);
	 }

	}

    // onError: Failed to get the heading
    //
    function onError(accelerationError) {
        alert('Compass error: ' + accelerationError.code);
    }

    </script>
  </head>
  <body>
    <h1>Protractor</h1>
    <p>getCurrentAccelerator</p>
	<div id="acceleromete">Waiting for Acceleromter...</div>
	<div id="acceleromete2">Waiting for Acceleromter...</div>
	<canvas id="protractor" height=255 width=477 style="border:1px solid #000000;" >WebGL not available for your Browser</canvas><br/>
	<h7>angle phone so the sun angle matches <b><font color="OrangeRed">line</font></b>.  Using GPS, lines on protractor should overlap.</h7>
	<script>
		//startWatch();
		var acceleration= new Object();

		acceleration.x= 45;
		acceleration.y= 45;
		acceleration.z= 30;

		acceleration.timestamp= new Date();
		

		drawProtractor(acceleration);
	</script>
  </body>
</html>

